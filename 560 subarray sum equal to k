//----------------------------------------------------------------------------------BRUTE FORCE-----------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
int count=0;
for(int i=0;i<nums.size();i++)
{
    int sum=0;
    for(int j=i;j<nums.size();j++)
    {
        sum+=nums[j];
        if(sum==k) count++;
    }
    
}
return count;
    }
};


//----------------------------------------------------------------------------------------OPTIMUM APPROACH----------------------------------------------------------------------------------------------------------

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        unordered_map<int, int> prefixSumMap; 
        prefixSumMap[0] = 1; 
        int count = 0, currentSum = 0;

        for (int num : nums) {
            currentSum += num;  

            
            if (prefixSumMap.find(currentSum - k) != prefixSumMap.end()) {
                count += prefixSumMap[currentSum - k];
            }

           
            prefixSumMap[currentSum]++;
        }

        return count;
    }
};
